--Player 1 Functions
function fBC1_Reveal()
  local zone = getObjectFromGUID(ID1_ZONE_CHECK)
  local cnt = fCountCardZone(zone)
  if cnt >= 0 and cnt < 8 then
    fMoveCard(ID1_ZONE_DECK, {1.4 + 1.2 * cnt, 3, 0}, ROT1_CHECK, true, false, true)
  else
    fMoveCard(ID1_ZONE_DECK, {1.4 + 7 * 1.2, 3, 0}, ROT1_CHECK, true, false, true)
  end
  fBC1_ShowRevealButtons()
end

function fBC1_MinimalReveal()
  local zone = getObjectFromGUID(ID1_ZONE_CHECK)
  local cnt = fCountCardZone(zone)
  if cnt >= 0 and cnt < 8 then
    fMoveCard(ID1_ZONE_DECK, {1.4 + 1.2 * cnt, 3, 0}, ROT1_CHECK, true, false, true)
  else
    fMoveCard(ID1_ZONE_DECK, {1.4 + 7 * 1.2, 3, 0}, ROT1_CHECK, true, false, true)
  end
end

function fBC1_Reveal2Stock()

  local zone = getObjectFromGUID(ID1_ZONE_STOCK)
  local cnt = fCountCardZone(zone)
  local guid = fGetBottomResolution(ID1_ZONE_CHECK, 1)
  local obj = getObjectFromGUID(guid)
  local pos
  local rot
  if cnt >= 0 and cnt < 8 then
    pos = { - 10.5, 3, - 2.55 - cnt * 1.2}
    rot = ROT1_STOCK
  else
    pos = { - 10.5, 3, - 2.55 - 7 * 1.2}
    rot = ROT1_STOCK
  end
  if obj.tag == 'Deck' then
    obj.takeObject({
      position = pos,
      rotation = rot,
      top = false,
    })
  elseif obj.tag == 'Card' then
    -- print(pos)
    obj.setPosition(pos)
    obj.setRotation(rot)
  end
  zone = getObjectFromGUID(ID1_ZONE_CHECK)
  Wait.time(function() fBC_CheckRemoveTemp(zone) end, 0.01)

end


function fBC1_Reveal2Hand()
  local zone = getObjectFromGUID(ID1_ZONE_CHECK)
  fMoveCard(ID1_ZONE_CHECK, POS1_HAND, ROT1_HAND, false, false, true)
  Wait.time(function() fBC_CheckRemoveTemp(zone) end, 0.01)
end


function fBC1_Reveal2Top()
  local zone = getObjectFromGUID(ID1_ZONE_CHECK)
  fMoveCard(ID1_ZONE_CHECK, POS1_DECKT, ROT1_DECKT, false, false, true)
  Wait.time(function() fBC_CheckRemoveTemp(zone) end, 0.01)
end


function fBC1_Reveal2Clock()
  local zone = getObjectFromGUID(ID1_ZONE_CLOCK)
  local cnt = fCountCardZone(zone)
  local guid = fGetBottomResolution(ID1_ZONE_CHECK, 1)
  local obj = getObjectFromGUID(guid)
  local pos
  local rot
  if cnt >= 0 and cnt < 7 then
    pos = { - 3.9 + 1.17 * cnt, 2.07, - 10}
    rot = {0, 180, 0}
  else
    return
  end
  if obj.tag == 'Deck' then
    obj.takeObject({
      position = pos,
      rotation = rot,
      top = false,
    })
  elseif obj.tag == 'Card' then
    -- print(pos)
    obj.setPosition(pos)
    obj.setRotation(rot)
  end
  zone = getObjectFromGUID(ID1_ZONE_CHECK)
  Wait.time(function() fBC_CheckRemoveTemp(zone) end, 0.01)
end


function fBC1_Look()
  fMoveCard(ID1_ZONE_DECK, POS1_HAND2, ROT1_HAND2, true, false, true)
  fBC1_ShowLookButtons()
end

function fBC1_MinimalLook()
  fMoveCard(ID1_ZONE_DECK, POS1_HAND2, ROT1_HAND2, true, false, true)
end


function fBC1_Look2Hand()
  local zone = getObjectFromGUID(ID1_ZONE_HAND2)
  fMoveCard(ID1_ZONE_HAND2, POS1_HAND, ROT1_HAND, true, false, true)
  Wait.time(function() fBC_CheckRemoveTemp(zone) end, 0.01)
end


function fBC1_Look2Top()
  local zone = getObjectFromGUID(ID1_ZONE_HAND2)
  fMoveCard(ID1_ZONE_HAND2, POS1_DECKT, ROT1_DECKT, true, false, true)
  Wait.time(function() fBC_CheckRemoveTemp(zone) end, 0.01)
end


function fBC1_Look2DeckD()
  local zone = getObjectFromGUID(ID1_ZONE_HAND2)
  fMoveCard(ID1_ZONE_HAND2, POS1_DECKD, ROT1_DECKD, true, false, true)
  Wait.time(function() fBC_CheckRemoveTemp(zone) end, 0.01)
end


function fBC1_All2Room()
  fMoveCard(ID1_ZONE_CHECK, POS1_ROOM, ROT1_ROOM, false, false, false)
  fMoveCard(ID1_ZONE_HAND2, POS1_ROOM, ROT1_ROOM, true, false, false)
  fBC_RemoveTempButtons()
end


function fBC1_Stock()
  local guid = fGetTopStock(ID1_ZONE_STOCK, 1)
  -- print(guid)
  local obj = getObjectFromGUID(guid)
  if obj.tag == 'Deck' then
    obj.takeObject({
      position = POS1_ROOM,
      rotation = ROT1_ROOM,
      smooth = false,
      top = true,
    })
  elseif obj.tag == 'Card' then
    obj.setPosition(POS1_ROOM)
    obj.setRotation(ROT1_ROOM)
  end
  -- fCountCardEvent(getObjectFromGUID(ID1_ZONE_STOCK), enter_object, 0)
  -- fMoveCard(ID1_ZONE_STOCK, POS1_ROOM, ROT1_ROOM, true, true, true)
end


function fBC1_BotStock()
  local guid = fGetBottomStock(ID1_ZONE_STOCK, 1)
  -- print(guid)
  local obj = getObjectFromGUID(guid)
  if obj.tag == 'Deck' then
    obj.takeObject({
      position = POS1_ROOM,
      rotation = ROT1_ROOM,
      smooth = false,
      top = false,
    })
  elseif obj.tag == 'Card' then
    obj.setPosition(POS1_ROOM)
    obj.setRotation(ROT1_ROOM)
  end
  -- fCountCardEvent(getObjectFromGUID(ID1_ZONE_STOCK), enter_object, 0)
  Wait.time(function() fSortStock(ID1_ZONE_STOCK, 1) end, 0.1)
end


function fBC1_SortStock()
  fSortStock(ID1_ZONE_STOCK, 1)
end


function fBC1_LevelUp()
  fMoveCard(ID1_ZONE_CLOCK, POS1_ROOM, ROT1_ROOM, true, true, false)
end


function fBC1_Refresh()
  fMoveCard(ID1_ZONE_ROOM, POS1_DECK, ROT1_DECK, true, true, false, false)
  fMoveCard(ID1_ZONE_DECK, POS1_DECK, ROT1_DECK, true, true, false, false)
  Wait.time(function() fShuffleCard(ID1_ZONE_DECK) end, 0.8)
end


function fBC1_TopToClock()
  local zone = getObjectFromGUID(ID1_ZONE_CLOCK)
  local cnt = fCountCardZone(zone)
  if cnt >= 0 and cnt < 7 then
    fMoveCard(ID1_ZONE_DECK, { - 3.9 + 1.17 * cnt, 2.07, - 10}, {0, 180, 0}, true, false, true)
  end
end


function fBC1_SearchDeck()
  -- TODO
  -- self.UI.show(ID1_ZONE_DECK)
  -- local zone = getObjectFromGUID(ID1_ZONE_DECK)
  -- local deck = zone.getObjects()
  -- deck[2].show()
end


function fBC1_MillTop()
  fMoveCard(ID1_ZONE_DECK, POS1_ROOM, ROT1_ROOM, true, true, true)
end


function fBC1_MillBottom()
  fMoveCard(ID1_ZONE_DECK, POS1_ROOM, ROT1_ROOM, false, true, true)
end


--Player 2 Functions
function fBC2_Reveal()
  local zone = getObjectFromGUID(ID2_ZONE_CHECK)
  local cnt = fCountCardZone(zone)
  if cnt >= 0 and cnt < 8 then
    fMoveCard(ID2_ZONE_DECK, { - 1.9 - 1.2 * cnt, 3, 0}, ROT2_CHECK, true, false, true)
  else
    fMoveCard(ID2_ZONE_DECK, { - 1.9 - 1.2 * 7, 3, 0}, ROT2_CHECK, true, false, true)
  end
  fBC2_ShowRevealButtons()
end


function fBC2_MinimalReveal()
  local zone = getObjectFromGUID(ID2_ZONE_CHECK)
  local cnt = fCountCardZone(zone)
  if cnt >= 0 and cnt < 8 then
    fMoveCard(ID2_ZONE_DECK, { - 1.9 - 1.2 * cnt, 3, 0}, ROT2_CHECK, true, false, true)
  else
    fMoveCard(ID2_ZONE_DECK, { - 1.9 - 1.2 * 7, 3, 0}, ROT2_CHECK, true, false, true)
  end
end


function fBC2_Reveal2Stock()


  local zone = getObjectFromGUID(ID2_ZONE_STOCK)
  local cnt = fCountCardZone(zone)
  local guid = fGetBottomResolution(ID2_ZONE_CHECK, 2)
  local obj = getObjectFromGUID(guid)
  local pos
  local rot
  if cnt >= 0 and cnt < 8 then
    pos = {10.5, 3, 2.6 + cnt * 1.2}
    rot = ROT2_STOCK
  else
    pos = {10.5, 3, 2.6 + 7 * 1.2}
    rot = ROT2_STOCK
  end
  if obj.tag == 'Deck' then
    obj.takeObject({
      position = pos,
      rotation = rot,
      top = false,
    })
  elseif obj.tag == 'Card' then
    -- print(pos)
    obj.setPosition(pos)
    obj.setRotation(rot)
  end
  zone = getObjectFromGUID(ID2_ZONE_CHECK)
  Wait.time(function() fBC_CheckRemoveTemp(zone) end, 0.01)


end


function fBC2_Reveal2Hand()
  local zone = getObjectFromGUID(ID2_ZONE_CHECK)
  fMoveCard(ID2_ZONE_CHECK, POS2_HAND, ROT2_HAND, false, false, true)
  Wait.time(function() fBC_CheckRemoveTemp(zone) end, 0.01)
end


function fBC2_Reveal2Top()
  local zone = getObjectFromGUID(ID2_ZONE_CHECK)
  fMoveCard(ID2_ZONE_CHECK, POS2_DECKT, ROT2_DECKT, false, false, true)
  Wait.time(function() fBC_CheckRemoveTemp(zone) end, 0.01)
end


function fBC2_Reveal2Clock()
  local zone = getObjectFromGUID(ID2_ZONE_CLOCK)
  local cnt = fCountCardZone(zone)
  local guid = fGetBottomResolution(ID2_ZONE_CHECK, 2)
  local obj = getObjectFromGUID(guid)
  local pos
  local rot
  if cnt >= 0 and cnt < 7 then
    pos = { 3.8 - 1.15 * cnt, 2.07, 9.9}
    rot = {0, 0, 0}
  else
    return
  end
  if obj.tag == 'Deck' then
    obj.takeObject({
      position = pos,
      rotation = rot,
      top = false,
    })
  elseif obj.tag == 'Card' then
    -- print(pos)
    obj.setPosition(pos)
    obj.setRotation(rot)
  end
  zone = getObjectFromGUID(ID2_ZONE_CHECK)
  Wait.time(function() fBC_CheckRemoveTemp(zone) end, 0.01)
end


function fBC2_Look()
  fMoveCard(ID2_ZONE_DECK, POS2_HAND2, ROT2_HAND2, true, false, true)
  fBC2_ShowLookButtons()
end


function fBC2_MinimalLook()
  fMoveCard(ID2_ZONE_DECK, POS2_HAND2, ROT2_HAND2, true, false, true)
end


function fBC2_Look2Hand()
  local zone = getObjectFromGUID(ID2_ZONE_HAND2)
  fMoveCard(ID2_ZONE_HAND2, POS2_HAND, ROT2_HAND, true, false, true)
  Wait.time(function() fBC_CheckRemoveTemp(zone) end, 0.01)
end

function fBC2_Look2Top()
  local zone = getObjectFromGUID(ID2_ZONE_HAND2)
  fMoveCard(ID2_ZONE_HAND2, POS2_DECKT, ROT2_DECKT, true, false, true)
  Wait.time(function() fBC_CheckRemoveTemp(zone) end, 0.01)
end


function fBC2_Look2DeckD()
  local zone = getObjectFromGUID(ID1_ZONE_HAND2)
  fMoveCard(ID2_ZONE_HAND2, POS2_DECKD, ROT2_DECKD, true, false, true)
  Wait.time(function() fBC_CheckRemoveTemp(zone) end, 0.01)
end


function fBC2_All2Room()
  fMoveCard(ID2_ZONE_CHECK, POS2_ROOM, ROT2_ROOM, false, true, false)
  fMoveCard(ID2_ZONE_HAND2, POS2_ROOM, ROT2_ROOM, true, false, false)
  fBC_RemoveTempButtons()
end


-- function fBC2_Stock()
--   fMoveCard(ID2_ZONE_STOCK, POS2_ROOM, ROT2_ROOM, true, true, true)
-- end
--
--
-- function fBC2_BotStock()
--   fMoveCard(ID2_ZONE_STOCK, POS2_ROOM, ROT2_ROOM, false, true, true)
-- end

function fBC2_LevelUp()
  fMoveCard(ID2_ZONE_CLOCK, POS2_ROOM, ROT2_ROOM, true, true, false)
end


function fBC2_Stock()
  local guid = fGetTopStock(ID2_ZONE_STOCK, 2)
  -- print(guid)
  local obj = getObjectFromGUID(guid)
  if obj.tag == 'Deck' then
    obj.takeObject({
      position = POS2_ROOM,
      rotation = ROT2_ROOM,
      smooth = false,
      top = true,
    })
  elseif obj.tag == 'Card' then
    obj.setPosition(POS2_ROOM)
    obj.setRotation(ROT2_ROOM)
  end
  -- fCountCardEvent(getObjectFromGUID(ID2_ZONE_STOCK), enter_object, 0)
  -- fMoveCard(ID1_ZONE_STOCK, POS1_ROOM, ROT1_ROOM, true, true, true)
end


function fBC2_BotStock()
  local guid = fGetBottomStock(ID2_ZONE_STOCK, 2)
  -- print(guid)
  local obj = getObjectFromGUID(guid)
  if obj.tag == 'Deck' then
    obj.takeObject({
      position = POS2_ROOM,
      rotation = ROT2_ROOM,
      smooth = false,
      top = false,
    })
  elseif obj.tag == 'Card' then
    obj.setPosition(POS2_ROOM)
    obj.setRotation(ROT2_ROOM)
  end
  -- fCountCardEvent(getObjectFromGUID(ID2_ZONE_STOCK), enter_object, 0)
  Wait.time(function() fSortStock(ID2_ZONE_STOCK, 2) end, 0.1)
end


function fBC2_SortStock()
  fSortStock(ID2_ZONE_STOCK, 2)
end


function fBC2_Refresh()
  fMoveCard(ID2_ZONE_ROOM, POS2_DECK, ROT2_DECK, true, true, false, false)
  fMoveCard(ID2_ZONE_DECK, POS2_DECK, ROT2_DECK, true, true, false, false)
  Wait.time(function() fShuffleCard(ID2_ZONE_DECK) end, 0.8)
end


function fBC2_TopToClock()
  local zone = getObjectFromGUID(ID2_ZONE_CLOCK)
  local cnt = fCountCardZone(zone)
  if cnt >= 0 and cnt < 7 then
    fMoveCard(ID2_ZONE_DECK, { 3.8 - 1.15 * cnt, 2.07, 9.9}, {0, 0, 0}, true, false, true)
  end
end


function fBC2_SearchDeck()
  -- TODO
  -- self.UI.show(ID1_ZONE_DECK)
  -- local zone = getObjectFromGUID(ID1_ZONE_DECK)
  -- local deck = zone.getObjects()
  -- deck[2].show()
end


function fBC2_MillTop()
  fMoveCard(ID2_ZONE_DECK, POS2_ROOM, ROT2_ROOM, true, true, true)
end


function fBC2_MillBottom()
  fMoveCard(ID2_ZONE_DECK, POS2_ROOM, ROT2_ROOM, false, true, true)
end

--General Functions
function fMoveCard(id_zone, pos, rot, istop, issmooth, issingle, splitcxes)
  splitcxes = splitcxes or true
  local zone = getObjectFromGUID(id_zone)
  local zoneObj = zone.getObjects()

  if issingle then
    for i = #zoneObj, 1, - 1 do
      if zoneObj[i].tag == 'Deck' then
        takeParams = {
          position = pos,
          rotation = rot,
          top = istop,
          smooth = issmooth,
        }
        zoneObj[i].takeObject(takeParams)
        break
      elseif zoneObj[i].tag == 'Card' then
        if issmooth then
          zoneObj[i].setPositionSmooth(pos, false, false)
          zoneObj[i].setRotationSmooth(rot, false, false)
        else
          zoneObj[i].setPosition(pos)
          zoneObj[i].setRotation(rot)
        end
        break
      end
    end
  else
    for i = #zoneObj, 1, - 1 do
      if zoneObj[i].tag == 'Deck' or zoneObj[i].tag == 'Card' then
        if issmooth then
          zoneObj[i].setPositionSmooth(pos, false, true)
          zoneObj[i].setRotationSmooth(rot, false, true)
        else
          zoneObj[i].setPosition(pos)
          zoneObj[i].setRotation(rot)
        end
      end
    end
  end
  fSplitCxes(ID1_ZONE_ROOM1, POS1_ROOM2, ROT1_ROOM)
  fSplitCxes(ID2_ZONE_ROOM1, POS2_ROOM2, ROT2_ROOM)
  -- fCountCardEvent(zone, enter_object, 0)
end

function fGetBottomResolution(id_zone, player)
  --returns the GUID of the bottom stock
  local zone = getObjectFromGUID(id_zone)
  local zoneObj = zone.getObjects()
  local t = {}
  for i = #zoneObj, 1, - 1 do
    if zoneObj[i].tag == 'Card' then
      t[zoneObj[i].guid] = zoneObj[i].getPosition()[1]
    elseif zoneObj[i].tag == 'Deck' then
      deckObj = zoneObj[i].getObjects()
      for j = #deckObj, 1, - 1 do
        t[zoneObj[i].guid] = zoneObj[i].getPosition()[1]
      end
    end
  end
  local sorted = {}
  for k, v in pairs(t) do
    table.insert(sorted, {k, v})
  end
  if player == 1 then
    table.sort(sorted, function(a, b) return a[2] < b[2] end)
  elseif player == 2 then
    table.sort(sorted, function(a, b) return a[2] > b[2] end)
  end
  return sorted[1][1]
end

function fGetTopResolution(id_zone, player)
  --returns the GUID of the bottom stock
  local zone = getObjectFromGUID(id_zone)
  local zoneObj = zone.getObjects()
  local t = {}
  for i = #zoneObj, 1, - 1 do
    if zoneObj[i].tag == 'Card' then
      t[zoneObj[i].guid] = zoneObj[i].getPosition()[1]
    elseif zoneObj[i].tag == 'Deck' then
      deckObj = zoneObj[i].getObjects()
      for j = #deckObj, 1, - 1 do
        t[zoneObj[i].guid] = zoneObj[i].getPosition()[1]
      end
    end
  end
  local sorted = {}
  for k, v in pairs(t) do
    table.insert(sorted, {k, v})
  end
  if player == 1 then
    table.sort(sorted, function(a, b) return a[2] > b[2] end)
  elseif player == 2 then
    table.sort(sorted, function(a, b) return a[2] < b[2] end)
  end
  return sorted[#sorted][1]
end


function fGetBottomStock(id_zone, player)
  --returns the GUID of the bottom stock
  local zone = getObjectFromGUID(id_zone)
  local zoneObj = zone.getObjects()
  local t = {}
  for i = #zoneObj, 1, - 1 do
    if zoneObj[i].tag == 'Card' then
      t[zoneObj[i].guid] = zoneObj[i].getPosition()[3]
    elseif zoneObj[i].tag == 'Deck' then
      deckObj = zoneObj[i].getObjects()
      for j = #deckObj, 1, - 1 do
        t[zoneObj[i].guid] = zoneObj[i].getPosition()[3]
      end
    end
  end
  local sorted = {}
  for k, v in pairs(t) do
    table.insert(sorted, {k, v})
  end
  if player == 1 then
    table.sort(sorted, function(a, b) return a[2] > b[2] end)
  elseif player == 2 then
    table.sort(sorted, function(a, b) return a[2] < b[2] end)
  end
  return sorted[1][1]
end

function fGetTopStock(id_zone, player)
  --returns the GUID of the bottom stock
  local zone = getObjectFromGUID(id_zone)
  local zoneObj = zone.getObjects()
  local t = {}
  for i = #zoneObj, 1, - 1 do
    if zoneObj[i].tag == 'Card' then
      t[zoneObj[i].guid] = zoneObj[i].getPosition()[3]
    elseif zoneObj[i].tag == 'Deck' then
      deckObj = zoneObj[i].getObjects()
      for j = #deckObj, 1, - 1 do
        t[zoneObj[i].guid] = zoneObj[i].getPosition()[3]
      end
    end
  end
  local sorted = {}
  for k, v in pairs(t) do
    table.insert(sorted, {k, v})
  end
  if player == 1 then
    table.sort(sorted, function(a, b) return a[2] > b[2] end)
  elseif player == 2 then
    table.sort(sorted, function(a, b) return a[2] < b[2] end)
  end
  return sorted[#sorted][1]
end

function fSortStock(id_zone, player)
  local zone = getObjectFromGUID(id_zone)
  local zoneObj = zone.getObjects()
  if player == 1 then
    pos = { - 10.6, 3, - 2.55}
  elseif player == 2 then
    pos = {10.3, 3, 2.6}
  end
  local t = {}
  for i = #zoneObj, 1, - 1 do
    if zoneObj[i].tag == 'Card' then
      t[zoneObj[i].guid] = zoneObj[i].getPosition()[3]
    elseif zoneObj[i].tag == 'Deck' then
      deckObj = zoneObj[i].getObjects()
      for j = #deckObj, 1, - 1 do
        t[zoneObj[i].guid] = zoneObj[i].getPosition()[3]
      end
    end
  end
  local sorted = {}
  for k, v in pairs(t) do
    table.insert(sorted, {k, v})
  end
  if player == 1 then
    table.sort(sorted, function(a, b) return a[2] > b[2] end)
  elseif player == 2 then
    table.sort(sorted, function(a, b) return a[2] < b[2] end)
  end
  cnt = 0
  for _, v in ipairs(sorted) do
    if player == 1 then
      if cnt < 8 then
        if getObjectFromGUID(v[1]).tag == 'Card' then
          getObjectFromGUID(v[1]).setPosition({ - 10.5, 3, - 2.55 - 1.2 * cnt})
          getObjectFromGUID(v[1]).setRotation(ROT1_STOCK)

        elseif getObjectFromGUID(v[1]).tag == 'Deck' then
          while(getObjectFromGUID(v[1]).getObjects() and cnt < 8 ) do
            getObjectFromGUID(v[1]).takeObject({
              position = { - 10.5, 3, - 2.55 - 1.2 * cnt},
              top = false,
              smooth = false,
            })
            getObjectFromGUID(v[1]).setRotation(ROT1_STOCK)
            cnt = cnt + 1
          end
        end
      else
        getObjectFromGUID(v[1]).setPosition({ - 10.5, 3, - 2.55 - 1.2 * 7})
        getObjectFromGUID(v[1]).setRotation(ROT1_STOCK)
      end

    elseif player == 2 then
      if cnt < 8 then
        if getObjectFromGUID(v[1]).tag == 'Card' then
          getObjectFromGUID(v[1]).setPosition({10.3, 3, 2.6 + 1.2 * cnt})

        elseif getObjectFromGUID(v[1]).tag == 'Deck' then
          while(getObjectFromGUID(v[1]).getObjects() and cnt < 8 ) do
            getObjectFromGUID(v[1]).takeObject({
              position = {10.3, 3, 2.6 + 1.2 * cnt},
              top = false,
              smooth = false,
            })
            cnt = cnt + 1
          end
        end
      else
        getObjectFromGUID(v[1]).setPosition({10.3, 3, 2.6 + 1.2 * 7})
      end

    end
    cnt = cnt + 1
  end


  -- for i = #zoneObj, 1, - 1 do
  --   if zoneObj[i].tag == 'Deck' or zoneObj[i].tag == 'Card' then
  --     zoneObj[i].setPosition(pos)
  --   end
  -- end
end

function fSplitCxes(id_zone, wr2_pos, wr2_rot)
  -- print("Split CXES")
  local deck
  local zone = getObjectFromGUID(id_zone)
  local zoneObj = zone.getObjects()
  for i = #zoneObj, 1, - 1 do
    if zoneObj[i].tag == 'Deck' then
      deck = zoneObj[i]
    elseif zoneObj[i].tag == 'Card' then
      if string.match(zoneObj[i].getDescription(), "Type: CX") then
        zoneObj[i].setPositionSmooth(wr2_pos, false, false)
        zoneObj[i].setRotationSmooth(wr2_rot, false, false)
      end
    end

    if deck == nil then
      return
    end
  end
  for _, card in pairs(deck.getObjects()) do
    if string.match(card.description, "Type: CX") then
      deck.takeObject({guid = card.guid, position = wr2_pos, rotation = wr2_rot})
    end
  end
end

function fShuffleCard(id_zone)
  local zone = getObjectFromGUID(id_zone)
  local zoneObj = zone.getObjects()

  for i = #zoneObj, 1, - 1 do
    if zoneObj[i].tag == 'Deck' then
      zoneObj[i].shuffle()
    end
  end
end

function fCountCardObject(obj)
  local cnt = 0
  if not obj then
    return cnt
  end

  if obj.tag == 'Deck' then
    cnt = obj.getQuantity()
  elseif obj.tag == 'Card' then
    cnt = 1
  end
  return cnt
end

function fCountCardZone(zone)
  local zoneObj = zone.getObjects()
  local cnt = 0

  for i = #zoneObj, 1, - 1 do
    cnt = cnt + fCountCardObject(zoneObj[i])
  end
  return cnt
end

function fCountCardEvent(zone)
  cardsZone = fCountCardZone(zone)
  local cnt = cardsZone
  if zone.getGUID() == ID1_ZONE_DECK then
    local text = getObjectFromGUID(ID1_TEXT_DECK)
    text.TextTool.setValue(cnt..'')
  elseif zone.getGUID() == ID1_ZONE_STOCK then
    local text = getObjectFromGUID(ID1_TEXT_STOCK)
    text.TextTool.setValue(cnt..'')
  elseif zone.getGUID() == ID1_ZONE_ROOM1 then
    local text = getObjectFromGUID(ID1_TEXT_ROOM1)
    text.TextTool.setValue(cnt..'')
  elseif zone.getGUID() == ID1_ZONE_ROOM2 then
    local text = getObjectFromGUID(ID1_TEXT_ROOM2)
    text.TextTool.setValue(cnt..'')
  elseif zone.getGUID() == ID1_ZONE_MEMORY then
    -- print(ID1_TEXT_MEMORY)
    local text = getObjectFromGUID(ID1_TEXT_MEMORY)
    text.TextTool.setValue(cnt..'')
  elseif zone.getGUID() == ID2_ZONE_DECK then
    local text = getObjectFromGUID(ID2_TEXT_DECK)
    text.TextTool.setValue(cnt..'')
  elseif zone.getGUID() == ID2_ZONE_STOCK then
    local text = getObjectFromGUID(ID2_TEXT_STOCK)
    text.TextTool.setValue(cnt..'')
  elseif zone.getGUID() == ID2_ZONE_ROOM1 then
    local text = getObjectFromGUID(ID2_TEXT_ROOM1)
    text.TextTool.setValue(cnt..'')
  elseif zone.getGUID() == ID2_ZONE_ROOM2 then
    local text = getObjectFromGUID(ID2_TEXT_ROOM2)
    text.TextTool.setValue(cnt..'')
  elseif zone.getGUID() == ID2_ZONE_MEMORY then
    local text = getObjectFromGUID(ID2_TEXT_MEMORY)
    text.TextTool.setValue(cnt..'')
  end
  --end
end

function isFaceDown(object)
  if (object.getRotation()[3] > 160 and object.getRotation()[3] < 200) then
    return true
  else
    return false
  end
end

function fBC_NextStep()
  if CURRENT_PHASE == "ATTACK_2" then
    fBC2_AttackDeclarationStep()
  elseif CURRENT_PHASE == "ATKDECL_2" then
    fBC2_TriggerStep()
  elseif CURRENT_PHASE == "TRIGGER_2" then
    fBC2_CounterStep()
  elseif CURRENT_PHASE == "COUNTER_2" then
    fBC2_DamageStep()
  elseif CURRENT_PHASE == "DAMAGE_2" then
    fBC2_BattleStep()
  elseif CURRENT_PHASE == "BATTLE_2" then
    fBC2_EncoreStep()
  elseif CURRENT_PHASE == "ATTACK_1" then
    fBC1_AttackDeclarationStep()
  elseif CURRENT_PHASE == "ATKDECL_1" then
    fBC1_TriggerStep()
  elseif CURRENT_PHASE == "TRIGGER_1" then
    fBC1_CounterStep()
  elseif CURRENT_PHASE == "COUNTER_1" then
    fBC1_DamageStep()
  elseif CURRENT_PHASE == "DAMAGE_1" then
    fBC1_BattleStep()
  elseif CURRENT_PHASE == "BATTLE_1" then
    fBC1_EncoreStep()
  end
end

function fBC_NextPhase()
  if CURRENT_PHASE == "START_2" then
    fBC2_StandPhase()
  elseif CURRENT_PHASE == "STAND_2" then
    fBC2_DrawPhase()
  elseif CURRENT_PHASE == "DRAW_2" then
    fBC2_ClockPhase()
  elseif CURRENT_PHASE == "CLOCK_2" then
    fBC2_MainPhase()
  elseif CURRENT_PHASE == "MAIN_2" then
    fBC2_AttackPhase()
  elseif CURRENT_PHASE == "CLIMAX_2" then
    fBC2_AttackPhase()
  elseif CURRENT_PHASE == "ATTACK_2" then
    fBC2_EncoreStep()
  elseif CURRENT_PHASE == "ATKDECL_2" then
    fBC2_EncoreStep()
  elseif CURRENT_PHASE == "TRIGGER_2" then
    fBC2_EncoreStep()
  elseif CURRENT_PHASE == "COUNTER_2" then
    fBC2_EncoreStep()
  elseif CURRENT_PHASE == "DAMAGE_2" then
    fBC2_EncoreStep()
  elseif CURRENT_PHASE == "BATTLE_2" then
    fBC2_EncoreStep()
  elseif CURRENT_PHASE == "ENCORE_2" then
    fBC2_EndPhase()
  elseif CURRENT_PHASE == "END_2" then
    fBC_UpdateTurnCounter(WHITE)
    fBC1_StandPhase()
  elseif CURRENT_PHASE == "START_1" then
    fBC1_StandPhase()
  elseif CURRENT_PHASE == "STAND_1" then
    fBC1_DrawPhase()
  elseif CURRENT_PHASE == "DRAW_1" then
    fBC1_ClockPhase()
  elseif CURRENT_PHASE == "CLOCK_1" then
    fBC1_MainPhase()
  elseif CURRENT_PHASE == "MAIN_1" then
    fBC1_AttackPhase()
  elseif CURRENT_PHASE == "CLIMAX_1" then
    fBC1_AttackPhase()
  elseif CURRENT_PHASE == "ATTACK_1" then
    fBC1_EncoreStep()
  elseif CURRENT_PHASE == "ATKDECL_1" then
    fBC1_EncoreStep()
  elseif CURRENT_PHASE == "TRIGGER_1" then
    fBC1_EncoreStep()
  elseif CURRENT_PHASE == "COUNTER_1" then
    fBC1_EncoreStep()
  elseif CURRENT_PHASE == "DAMAGE_1" then
    fBC1_EncoreStep()
  elseif CURRENT_PHASE == "BATTLE_1" then
    fBC1_EncoreStep()
  elseif CURRENT_PHASE == "ENCORE_1" then
    fBC1_EndPhase()
  elseif CURRENT_PHASE == "END_1" then
    fBC_UpdateTurnCounter(RED)
    fBC2_StandPhase()
  end
end


function fBC_ReversedToWR()
  fBC1_ReversedToWR()
  fBC2_ReversedToWR()
  fBC_NextPhase()
end


function fBC_StartOfGame()
  CCC = getObjectFromGUID(ID_CENTER)
  TURNCOUNTER = 0
  fBC_SetTurnCounter()
  fBC_UpdateZoneTexts()
  fBC_RemoveButtons()
  spawnObject(
    {
      type = "Die_6",
      position = POS1_DIE
    }
  )
  spawnObject(
    {
      type = "Die_6",
      position = POS2_DIE
    }
  )
  CCC.createButton(pB1_Start)
  CCC.createButton(pB2_Start)
  CCC.createButton(pB1_Second)
  CCC.createButton(pB2_Second)
  CCC.createButton(pB1_Skip)
  CCC.createButton(pB2_Skip)
  CCC.createButton(pB_HideButtons)
  CCC.createButton(pB_ImportDeckLog)
  CCC.createButton(pB_ImportEncoreDecks)
  CCC.createInput(iP_DecklogLink)
end

function fBC_HideButtons()
  CCC = getObjectFromGUID(ID_CENTER)
  fBC_SetTurnCounter(" ")
  fBC_RemoveButtons()
  fBC_ShowMinimal()
end


-- Player 2 Phase Functions
function fBC2_Mulligan()
  local cnt = fCountCardZone(getObjectFromGUID(ID2_ZONE_ROOM))
  for i = cnt, 1, - 1 do
    fMoveCard(ID2_ZONE_DECK, POS2_HAND, ROT2_HAND, true, true, true)
  end
end


function fBC2_StandAll()
  local frontRow = getObjectFromGUID(ID2_ZONE_FRONTROW)
  local frontRowObjects = frontRow.getObjects()
  local backRow = getObjectFromGUID(ID2_ZONE_BACKROW)
  local backRowObjects = backRow.getObjects()
  for i = #frontRowObjects, 1, - 1 do
    if (frontRowObjects[i].tag == 'Card' or frontRowObjects[i].tag == 'Deck') then
      if (not isFaceDown(frontRowObjects[i])) then
        frontRowObjects[i].setRotation(pB2_ROTATION)
      end
    end
  end
  for i = #backRowObjects, 1, - 1 do

    if (backRowObjects[i].tag == 'Card' or backRowObjects[i].tag == 'Deck') then
      if (not isFaceDown(backRowObjects[i])) then
        backRowObjects[i].setRotation(pB2_ROTATION)
      end
    end
  end
  fBC_NextPhase()
end


function fBC2_MinimalStandAll()
  local frontRow = getObjectFromGUID(ID2_ZONE_FRONTROW)
  local frontRowObjects = frontRow.getObjects()
  local backRow = getObjectFromGUID(ID2_ZONE_BACKROW)
  local backRowObjects = backRow.getObjects()
  for i = #frontRowObjects, 1, - 1 do
    if (frontRowObjects[i].tag == 'Card' or frontRowObjects[i].tag == 'Deck') then
      if (not isFaceDown(frontRowObjects[i])) then
        frontRowObjects[i].setRotation(pB2_ROTATION)
      end
    end
  end
  for i = #backRowObjects, 1, - 1 do

    if (backRowObjects[i].tag == 'Card' or backRowObjects[i].tag == 'Deck') then
      if (not isFaceDown(backRowObjects[i])) then
        backRowObjects[i].setRotation(pB2_ROTATION)
      end
    end
  end
end


function fBC2_Draw()
  -- Only use this for Draw Phase
  fMoveCard(ID2_ZONE_DECK, POS2_HAND, ROT2_HAND, true, true, true)
  fBC_NextPhase()
end


function fBC2_DrawTwo()
  -- Only use this for ClockPhase Draw
  fMoveCard(ID2_ZONE_DECK, POS2_HAND, ROT2_HAND, true, true, true)
  fMoveCard(ID2_ZONE_DECK, POS2_HAND, ROT2_HAND, true, true, true)
  fBC_NextPhase()
end


function fBC2_DeclareFrontal()
  broadcastToAll("Frontal Attack", {r = 1, g = 0, b = 0})
  fBC_NextStep()
end

function fBC2_DeclareSide()
  broadcastToAll("Side Attack", {r = 1, g = 0, b = 0})
  fBC_NextStep()
end

function fBC2_DeclareDirect()
  broadcastToAll("Direct Attack", {r = 1, g = 0, b = 0})
  fBC_NextStep()
end


function fBC2_BlindStock()
  local zone = getObjectFromGUID(ID2_ZONE_STOCK)
  local cnt = fCountCardZone(zone)
  if cnt >= 0 and cnt < 8 then
    fMoveCard(ID2_ZONE_DECK, {10.5, 3, 2.6 + cnt * 1.2}, ROT2_STOCK, true, false, true)
  else
    fMoveCard(ID2_ZONE_DECK, {10.5, 3, 2.6 + 7 * 1.2}, ROT2_STOCK, true, false, true)
  end
end


function fBC2_NoCounters()
  broadcastToAll("No Counters", {r = 1, g = 0, b = 0})
  fBC_NextStep()
end


function fBC2_ReversedToWR()
  local frontRow = getObjectFromGUID(ID2_ZONE_FRONTROW)
  local frontRowObjects = frontRow.getObjects()
  local backRow = getObjectFromGUID(ID2_ZONE_BACKROW)
  local backRowObjects = backRow.getObjects()
  for i = #frontRowObjects, 1, - 1 do
    local rotationValue = frontRowObjects[i].getRotation()
    if (not isFaceDown(frontRowObjects[i])) then
      if (frontRowObjects[i].tag == 'Card' or frontRowObjects[i].tag == 'Deck') then
        if (rotationValue[2] < 200) and (rotationValue[2] > 160) then
          frontRowObjects[i].setPositionSmooth(POS2_ROOM, false, false)
          frontRowObjects[i].setRotationSmooth(ROT2_ROOM, false, false)
        end
      end
    end
  end
  for i = #backRowObjects, 1, - 1 do
    local rotationValue = backRowObjects[i].getRotation()
    if (not isFaceDown(backRowObjects[i])) then
      if (backRowObjects[i].tag == 'Card' or backRowObjects[i].tag == 'Deck') then
        if (rotationValue[2] < 200) and (rotationValue[2] > 160) then
          backRowObjects[i].setPositionSmooth(POS2_ROOM, false, false)
          backRowObjects[i].setRotationSmooth(ROT2_ROOM, false, false)
        end
      end
    end
  end
end


function fBC2_ClimaxToWR()
  fMoveCard(ID2_ZONE_CLIMAX, POS2_ROOM2, ROT2_ROOM, true, true, true)
  fBC_NextPhase()
end


--Player 1 Phase Functions
function fBC1_Mulligan()
  local cnt = fCountCardZone(getObjectFromGUID(ID1_ZONE_ROOM))
  for i = cnt, 1, - 1 do
    fMoveCard(ID1_ZONE_DECK, POS1_HAND, ROT1_HAND, true, true, true)
  end
end


function fBC1_StandAll()
  local frontRow = getObjectFromGUID(ID1_ZONE_FRONTROW)
  local frontRowObjects = frontRow.getObjects()
  local backRow = getObjectFromGUID(ID1_ZONE_BACKROW)
  local backRowObjects = backRow.getObjects()
  for i = #frontRowObjects, 1, - 1 do
    if (not isFaceDown(frontRowObjects[i])) then
      if (frontRowObjects[i].tag == 'Card' or frontRowObjects[i].tag == 'Deck') then
        frontRowObjects[i].setRotation(pB1_ROTATION)
      end
    end
  end
  for i = #backRowObjects, 1, - 1 do
    if (not isFaceDown(backRowObjects[i])) then
      if (backRowObjects[i].tag == 'Card' or backRowObjects[i].tag == 'Deck') then
        backRowObjects[i].setRotation(pB1_ROTATION)
      end
    end
  end
  fBC_NextPhase()
end


function fBC1_MinimalStandAll()
  local frontRow = getObjectFromGUID(ID1_ZONE_FRONTROW)
  local frontRowObjects = frontRow.getObjects()
  local backRow = getObjectFromGUID(ID1_ZONE_BACKROW)
  local backRowObjects = backRow.getObjects()
  for i = #frontRowObjects, 1, - 1 do
    if (not isFaceDown(frontRowObjects[i])) then
      if (frontRowObjects[i].tag == 'Card' or frontRowObjects[i].tag == 'Deck') then
        frontRowObjects[i].setRotation(pB1_ROTATION)
      end
    end
  end
  for i = #backRowObjects, 1, - 1 do
    if (not isFaceDown(backRowObjects[i])) then
      if (backRowObjects[i].tag == 'Card' or backRowObjects[i].tag == 'Deck') then
        backRowObjects[i].setRotation(pB1_ROTATION)
      end
    end
  end
end


function fBC1_Draw()
  --Only use this for Draw Phase
  fMoveCard(ID1_ZONE_DECK, POS1_HAND, ROT1_HAND, true, true, true)
  fBC_NextPhase()
end


function fBC1_DrawTwo()
  -- Only use this for ClockPhase Draw
  fMoveCard(ID1_ZONE_DECK, POS1_HAND, ROT1_HAND, true, true, true)
  fMoveCard(ID1_ZONE_DECK, POS1_HAND, ROT1_HAND, true, true, true)
  fBC_NextPhase()
end


function fBC1_DeclareFrontal()
  broadcastToAll("Frontal Attack", {r = 1, g = 1, b = 1})
  fBC_NextStep()
end


function fBC1_DeclareSide()
  broadcastToAll("Side Attack", {r = 1, g = 1, b = 1})
  fBC_NextStep()
end


function fBC1_DeclareDirect()
  broadcastToAll("Direct Attack", {r = 1, g = 1, b = 1})
  fBC_NextStep()
end


function fBC1_BlindStock()
  local zone = getObjectFromGUID(ID1_ZONE_STOCK)
  local cnt = fCountCardZone(zone)
  if cnt >= 0 and cnt < 8 then
    fMoveCard(ID1_ZONE_DECK, { - 10.5, 3, - 2.55 - cnt * 1.2}, ROT1_STOCK, true, false, true)
  else
    fMoveCard(ID1_ZONE_DECK, { - 10.5, 3, - 2.55 - 7 * 1.2}, ROT1_STOCK, true, false, true)
  end
end


function fBC1_NoCounters()
  broadcastToAll("No Counters", {r = 1, g = 1, b = 1})
  fBC_NextStep()
end


function fBC1_ReversedToWR()
  local frontRow = getObjectFromGUID(ID1_ZONE_FRONTROW)
  local frontRowObjects = frontRow.getObjects()
  local backRow = getObjectFromGUID(ID1_ZONE_BACKROW)
  local backRowObjects = backRow.getObjects()
  for i = #frontRowObjects, 1, - 1 do
    local rotationValue = frontRowObjects[i].getRotation()
    if (not isFaceDown(frontRowObjects[i])) then
      if (frontRowObjects[i].tag == 'Card' or frontRowObjects[i].tag == 'Deck') then
        if rotationValue[2] < 20 or rotationValue[2] > 340 then
          frontRowObjects[i].setPositionSmooth(POS1_ROOM, false, false)
          frontRowObjects[i].setRotationSmooth(ROT1_ROOM, false, false)
        end
      end
    end
  end
  for i = #backRowObjects, 1, - 1 do
    local rotationValue = backRowObjects[i].getRotation()

    if (not isFaceDown(backRowObjects[i])) then
      if (backRowObjects[i].tag == 'Card' or backRowObjects[i].tag == 'Deck') then
        if rotationValue[2] < 20 or rotationValue[2] > 340 then
          backRowObjects[i].setPositionSmooth(POS1_ROOM, false, false)
          backRowObjects[i].setRotationSmooth(ROT1_ROOM, false, false)
        end
      end
    end
  end
end


function fBC1_ClimaxToWR()
  fMoveCard(ID1_ZONE_CLIMAX, POS1_ROOM2, ROT1_ROOM, true, true, true)
  fBC_NextPhase()
end

-- Button Functions
function fBC1_ShowLookButtons()
  fBC_RemoveTempButtons()
  CCC = getObjectFromGUID(ID_CENTER)
  CCC.createButton(pB1_Look2Top)
  CCC.createButton(pB1_Look2DeckD)
  CCC.createButton(pB1_Look2Hand)
  CCC.createButton(pB1_Look2Room)
end


function fBC1_ShowRevealButtons()
  fBC_RemoveTempButtons()
  CCC = getObjectFromGUID(ID_CENTER)
  CCC.createButton(pB1_Reveal2Hand)
  CCC.createButton(pB1_Reveal2Stock)
  CCC.createButton(pB1_Reveal2Clock)
  CCC.createButton(pB1_Reveal2Top)
  CCC.createButton(pB1_All2Room)
end


function fBC1_ShowPhases(currentPhase)
  CCC = getObjectFromGUID(ID_CENTER)
  PHASES = {
    pB1_StandPhase,
    pB1_DrawPhase,
    pB1_ClockPhase,
    pB1_MainPhase,
    pB1_ClimaxPhase,
    pB1_AttackPhase,
    pB1_EndPhase
  }
  for i = #PHASES, 1, - 1 do
    if PHASES[i].label == currentPhase then
      phase = {
        click_function = PHASES[i].click_function,
        label = PHASES[i].label,
        position = PHASES[i].position,
        rotation = PHASES[i].rotation,
        scale = PHASES[i].scale,
        width = PHASES[i].width,
        height = PHASES[i].height,
        font_size = PHASES[i].font_size,
        tooltip = PHASES[i].tooltip,
        color = HONEY
      }
      CCC.createButton(phase)
    else
      CCC.createButton(PHASES[i])
    end
  end
end


function fBC1_ShowSteps(currentPhase)

  CCC = getObjectFromGUID(ID_CENTER)
  PHASES = {
    pB1_AttackDeclStep,
    pB1_TriggerStep,
    pB1_CounterStep,
    pB1_DamageStep,
    pB1_BattleStep,
    pB1_EncoreStep
  }
  for i = #PHASES, 1, - 1 do
    if PHASES[i].label == currentPhase then
      phase = {
        click_function = PHASES[i].click_function,
        label = PHASES[i].label,
        position = PHASES[i].position,
        rotation = PHASES[i].rotation,
        scale = PHASES[i].scale,
        width = PHASES[i].width,
        height = PHASES[i].height,
        font_size = PHASES[i].font_size,
        tooltip = PHASES[i].tooltip,
        color = HONEY
      }
      CCC.createButton(phase)
    else
      CCC.createButton(PHASES[i])
    end
  end
end


function fBC2_ShowLookButtons()
  fBC_RemoveTempButtons()
  CCC = getObjectFromGUID(ID_CENTER)
  CCC.createButton(pB2_Look2Top)
  CCC.createButton(pB2_Look2DeckD)
  CCC.createButton(pB2_Look2Hand)
  CCC.createButton(pB2_Look2Room)
end


function fBC2_ShowRevealButtons()
  fBC_RemoveTempButtons()
  CCC = getObjectFromGUID(ID_CENTER)
  CCC.createButton(pB2_Reveal2Hand)
  CCC.createButton(pB2_Reveal2Stock)
  CCC.createButton(pB2_Reveal2Clock)
  CCC.createButton(pB2_Reveal2Top)
  CCC.createButton(pB2_All2Room)
end


function fBC2_ShowPhases(currentPhase)

  CCC = getObjectFromGUID(ID_CENTER)
  PHASES = {
    pB2_StandPhase,
    pB2_DrawPhase,
    pB2_ClockPhase,
    pB2_MainPhase,
    pB2_ClimaxPhase,
    pB2_AttackPhase,
    pB2_EndPhase
  }
  for i = #PHASES, 1, - 1 do
    if PHASES[i].label == currentPhase then
      phase = {
        click_function = PHASES[i].click_function,
        label = PHASES[i].label,
        position = PHASES[i].position,
        rotation = PHASES[i].rotation,
        scale = PHASES[i].scale,
        width = PHASES[i].width,
        height = PHASES[i].height,
        font_size = PHASES[i].font_size,
        tooltip = PHASES[i].tooltip,
        color = HONEY
      }
      CCC.createButton(phase)
    else
      CCC.createButton(PHASES[i])
    end
  end
end


function fBC2_ShowSteps(currentPhase)

  CCC = getObjectFromGUID(ID_CENTER)
  PHASES = {
    pB2_AttackDeclStep,
    pB2_TriggerStep,
    pB2_CounterStep,
    pB2_DamageStep,
    pB2_BattleStep,
    pB2_EncoreStep
  }
  for i = #PHASES, 1, - 1 do
    if PHASES[i].label == currentPhase then
      phase = {
        click_function = PHASES[i].click_function,
        label = PHASES[i].label,
        position = PHASES[i].position,
        rotation = PHASES[i].rotation,
        scale = PHASES[i].scale,
        width = PHASES[i].width,
        height = PHASES[i].height,
        font_size = PHASES[i].font_size,
        tooltip = PHASES[i].tooltip,
        color = HONEY
      }
      CCC.createButton(phase)
    else
      CCC.createButton(PHASES[i])
    end
  end
end


function fBC_ShowMinimal()
  CCC = getObjectFromGUID(ID_CENTER)
  CCC.createButton(pB_NewGame)
  CCC.createButton(pB1_Stock)
  CCC.createButton(pB2_Stock)
  CCC.createButton(pB1_Refresh)
  CCC.createButton(pB2_Refresh)
  CCC.createButton(pB1_LevelUp)
  CCC.createButton(pB2_LevelUp)
  CCC.createButton(pB1_MinimalFlip)
  CCC.createButton(pB2_MinimalFlip)
  CCC.createButton(pB1_MinimalStock)
  CCC.createButton(pB1_BotStock)
  CCC.createButton(pB1_SortStock)
  CCC.createButton(pB2_MinimalStock)
  CCC.createButton(pB2_BotStock)
  CCC.createButton(pB2_SortStock)
  CCC.createButton(pB1_MinimalClock)
  CCC.createButton(pB2_MinimalClock)
  CCC.createButton(pB1_MinimalWR)
  CCC.createButton(pB2_MinimalWR)
  CCC.createButton(pB1_MinimalLook)
  CCC.createButton(pB1_MinimalLook2Top)
  CCC.createButton(pB1_MinimalLook2DeckD)
  CCC.createButton(pB1_MinimalLook2Room)
  CCC.createButton(pB2_MinimalLook)
  CCC.createButton(pB2_MinimalLook2Top)
  CCC.createButton(pB2_MinimalLook2DeckD)
  CCC.createButton(pB2_MinimalLook2Room)
  CCC.createButton(pB1_MinimalStandAll)
  CCC.createButton(pB1_MinimalTopToStock)
  CCC.createButton(pB1_MinimalTopToClock)
  CCC.createButton(pB1_MinimalTopToWR)
  CCC.createButton(pB2_MinimalStandAll)
  CCC.createButton(pB2_MinimalTopToStock)
  CCC.createButton(pB2_MinimalTopToClock)
  CCC.createButton(pB2_MinimalTopToWR)

end


function fBC_ShowStandard()
  CCC = getObjectFromGUID(ID_CENTER)
  CCC.createButton(pB_NewGame)
  CCC.createButton(pB_HideButtons)
  CCC.createButton(pB1_Stock)
  CCC.createButton(pB1_BotStock)
  CCC.createButton(pB1_SortStock)
  CCC.createButton(pB2_Stock)
  CCC.createButton(pB2_BotStock)
  CCC.createButton(pB2_SortStock)
  CCC.createButton(pB1_Refresh)
  CCC.createButton(pB2_Refresh)
  CCC.createButton(pB1_LevelUp)
  CCC.createButton(pB2_LevelUp)
  CCC.createButton(pB1_RefreshDamage)
  CCC.createButton(pB1_MillTop)
  CCC.createButton(pB1_MillBottom)
  CCC.createButton(pB2_RefreshDamage)
  CCC.createButton(pB2_MillTop)
  CCC.createButton(pB2_MillBottom)
  CCC.createButton(pB1_Look)
  CCC.createButton(pB2_Look)
  CCC.createButton(pB1_BlindStock)
  CCC.createButton(pB2_BlindStock)
  CCC.createButton(pB1_Reveal)
  CCC.createButton(pB2_Reveal)
  CCC.createButton(pB1_NextPhase)
  CCC.createButton(pB2_NextPhase)
end


function fBC_RemoveButtons()
  CCC = getObjectFromGUID(ID_CENTER)
  local buttons = CCC.getButtons()
  if not buttons then
    return
  end
  for i = #buttons, 1, - 1 do
    CCC.removeButton(buttons[i].index)
  end
end


function fBC_RemoveTempButtons()
  CCC = getObjectFromGUID(ID_CENTER)
  local buttons = CCC.getButtons()
  for i = #buttons, 1, - 1 do
    if (buttons[i].hover_color == GREY) then
      CCC.removeButton(buttons[i].index)
    end
  end
end


function fBC_CheckRemoveTemp(zone)
  if (fCountCardZone(zone) == 0) then
    fBC_RemoveTempButtons()
  end
end


function fRemoveDice()
  local objects = getAllObjects()
  for i = #objects, 1, - 1 do
    if (objects[i].tag == 'Dice') then
      destroyObject(objects[i])
    end
  end
end

function fBCChangePhaseColor(name)
  CCC = getObjectFromGUID(ID_CENTER)
  local buttons = CCC.getButtons()
  for i = #buttons, 1, - 1 do
    if buttons[i].label == name then
      -- CCC.editButton({index = i - 1, color = HONEY})
    end
  end
end


function fBCChangePhaseColorByFunc(funcName)
  CCC = getObjectFromGUID(ID_CENTER)
  local buttons = CCC.getButtons()
  for i = #buttons, 1, - 1 do
    if buttons[i].click_function == funcName then
      CCC.editButton({index = i - 1, color = HONEY})
      return
    end
  end
end


function fBC_UpdateZoneTexts()
  texts = {
    ID1_TEXT_DECK,
    ID1_TEXT_STOCK,
    ID1_TEXT_ROOM1,
    ID1_TEXT_ROOM2,
    ID2_TEXT_DECK,
    ID2_TEXT_STOCK,
    ID2_TEXT_ROOM1,
    ID2_TEXT_ROOM2
  }
  zones = {
    ID1_ZONE_DECK,
    ID1_ZONE_STOCK,
    ID1_ZONE_ROOM1,
    ID1_ZONE_ROOM2,
    ID2_ZONE_DECK,
    ID2_ZONE_STOCK,
    ID2_ZONE_ROOM1,
    ID2_ZONE_ROOM2
  }

  for i = #zones, 1, - 1 do
    counter = getObjectFromGUID(texts[i])
    zone = getObjectFromGUID(zones[i])
    -- print(fCountCardZone(zone))
    counter.setValue(tostring(fCountCardZone(zone)))
  end
end


function fBC_SetTurnCounter(text, color)
  text = text or " "
  color = color or WHITE
  counter = getObjectFromGUID(ID_TEXT_TURNCOUNTER)
  counter.setValue(text)
  counter.TextTool.setFontColor(color)
end


function fBC_UpdateTurnCounter(color)
  counter = getObjectFromGUID(ID_TEXT_TURNCOUNTER)
  if color == STARTING_COLOR then
    TURNCOUNTER = TURNCOUNTER + 1
  end
  counter.setValue("Turn \n" .. tostring(TURNCOUNTER))
  counter.TextTool.setFontColor(color)
end

function fBC_DeckCheck()
  deck = getObjectFromGUID(ID1_ZONE_DECK).getObjects()
  deckCheckPassed = true
  deckFound = false
  for i = #deck, 1, - 1 do
    if deck[i].tag == "Deck" or deck[i].tag == "Card" then
      deckFound = true
    end
  end
  if not deckFound then
    broadcastToAll("Please put your Deck onto your Deck Zone", WHITE)
    deckCheckPassed = false
  end

  deck = getObjectFromGUID(ID2_ZONE_DECK).getObjects()
  deckFound = false
  for i = #deck, 1, - 1 do
    if deck[i].tag == "Deck" or deck[i].tag == "Card" then
      deckFound = true
    end
  end
  if not deckFound then
    broadcastToAll("Please put your Deck onto your Deck Zone", RED)
    deckCheckPassed = false
  end
  return deckCheckPassed

end

function fBC_ImportDeckLog()
  print(INPUTTEXT)
  local url = "https://decklog-en.bushiroad.com/system/app/api/view/ANK0"
  local headers = {referer = "https://decklog-en.bushiroad.com/", }
  local body = "Test"
  WebRequest.custom(url, "GET", true, body, headers, function(request)
    if request.is_error then
    log(request.error)
  else
    broadcastToAll(request.text)
    responseData = JSON.decode(request.text)
    print(responseData)
    print(responseData["list"][1])
    print(responseData["list"][1]["img"])
    for i = 1, #responseData["list"] do
      for j = 1, responseData["list"][i]["num"] do
        if responseData["list"][i]["card_kind"] == 4 then
          local object = spawnObject({
            type = "CardCustom",
            sound = false,
            position = POS1_DECK,
            rotation = {180, 0, 0},
            scale = {0.5, 1, 1},
            callback_function = function(spawned_object)
              log(spawned_object.getBounds())
            end
          })
          object.setCustomObject({
            type = 0,
            face = "https://en.ws-tcg.com/wp/wp-content/images/cardimages/" .. responseData["list"][i]["img"],
            back = "https://i0.wp.com/www.iantcg.com/wp-content/uploads/2020/10/ws_cardback_600px-1.png?resize=300%2C419&ssl=1",
            sideways = false
          })
          object.setDescription("Type: CX")
        else
          local object = spawnObject({
            type = "CardCustom",
            sound = false,
            position = POS1_DECK,
            rotation = {180, 0, 0},
            callback_function = function(spawned_object)
              log(spawned_object.getBounds())
            end
          })
          object.setCustomObject({
            type = 0,
            face = "https://en.ws-tcg.com/wp/wp-content/images/cardimages/" .. responseData["list"][i]["img"],
            back = "https://i0.wp.com/www.iantcg.com/wp-content/uploads/2020/10/ws_cardback_600px-1.png?resize=300%2C419&ssl=1"
          })
        end
      end
    end
  end
end)


end


function fBC_ImportEncore()
print(INPUTTEXT)
local url = "https://www.encoredecks.com/api/deck/BSR7mI0Hb"
local body = "Test"
WebRequest.get(url, function(request)
  if request.is_error then
  log(request.error)
else
  broadcastToAll(request.text)
  responseData = JSON.decode(request.text)
  -- print(responseData)
  print(responseData["cards"][1]["imagepath"])
  for i = 1, #responseData["cards"] do
    print(responseData["cards"][i]["imagepath"])
    local object = spawnObject({
      type = "CardCustom",
      sound = true,
      position = POS1_DECK,
      rotation = {180, 0, 0},
      callback_function = function(spawned_object)
        log(spawned_object.getBounds())
      end
    })
    object.setCustomObject({
      type = 0,
      face = "https://www.encoredecks.com/images/" .. responseData["cards"][i]["imagepath"],
      back = "https://i0.wp.com/www.iantcg.com/wp-content/uploads/2020/10/ws_cardback_600px-1.png?resize=300%2C419&ssl=1"
    })
  end
end
end)

end


function iPC_DeckLogInputFunc(obj, color, input, stillEditing)
if not stillEditing then
INPUTTEXT = input
print(INPUTTEXT)
end
end
